#!/bin/sh
#
# Wrapper script for cvmfs_pull. Create /etc/cvmfs/replica.conf and/or
# /etc/cvmfs/replica.local to set the parameters.  Define repositories
# in /etc/cvmfs/replica.repositories
#


[ -f /etc/cvmfs/replica.conf ] && . /etc/cvmfs/replica.conf
[ -f /etc/cvmfs/replica.local ] && . /etc/cvmfs/replica.local
ADDITIONAL_OPTIONS=

if [ -z $CVMFS_REPLICA_LOG ]; then
   CVMFS_REPLICA_LOG=/var/log/cvmfs_replica
fi
if [ ! -z "$CVMFS_REPLICA_ADDITIONAL" ]; then
  ADDITIONAL_OPTIONS=$CVMFS_REPLICA_ADDITIONAL 
fi


if [ -z $CVMFS_REPLICA_LOG ]; then
  echo "CVMFS_REPLICA_LOG is required"
  exit 1
fi

if [ -z $CVMFS_SNAPSHOT_RETENTION ]; then
  echo "CVMFS_SNAPSHOT_RETENTION is required"
  exit 1
fi

if [ ! -f /etc/cvmfs/replica.repositories ]; then
   echo "Create /etc/cvmfs/replica.repositories to define the list of repositories to replicate."
   echo "Repositories are defined linewise as FQRN|URL|SigningPubKey|LocalPubDir|ParallelConnections|Timeout|Retries"
   echo "e.g. hepsoft.cern.ch|http://cernvm-bkp.cern.ch/opt/hepsoft|/etc/cvmfs/keys/cern.ch.pub|/var/cvmfs/hepsoft/pub|32|10|3"
   exit 1
fi

LOCK_FILE=/var/run/cvmfs_snapshot

if [ -f "$LOCK_FILE" ]; then
  echo "Another snapshot is currently running ($LOCK_FILE exists)"
  exit 1
else
  touch $LOCK_FILE
fi

cat /etc/cvmfs/replica.repositories | sed 's/^[ \t]*//' | sed 's/[ \t]*$//' | grep -v '^#' | while read
do
   [ -z "$REPLY" ] && continue   
   
   # Sanity check
   echo "$REPLY" | awk -F \| '{if (NF < 7) exit 1; for (i=1; i<=NF; ++i) {if ($i == "") exit 1}}'
   if [ $? -ne 0 ]; then
      echo "Parsing error for $REPLY"
      continue
   fi
   
   # Fill repo variables
   REPO_NAME=`echo "$REPLY" | cut -d\| -f1`
   REPO_URL=`echo "$REPLY" | cut -d\| -f2`
   REPO_KEY=`echo "$REPLY" | cut -d\| -f3`
   REPO_PUBDIR=`echo "$REPLY" | cut -d\| -f4`
   REPO_PARALLEL=`echo "$REPLY" | cut -d\| -f5`
   REPO_TIMEOUT=`echo "$REPLY" | cut -d\| -f6`
   REPO_RETRY=`echo "$REPLY" | cut -d\| -f7`  
   
   # Go!
   echo "---" >> $CVMFS_REPLICA_LOG
   /bin/date | tee -a $CVMFS_REPLICA_LOG
  
  initial_options=
  if [ -d $REPO_PUBDIR/catalogs ]; then
    snapshot=snapshot-`date "+%Y%m%d%H%M%S"`
    snapshot_progress="$snapshot.in_progress"
    cp -a $REPO_PUBDIR/catalogs/ \
          $REPO_PUBDIR/$snapshot_progress
  else
    snapshot="snapshot-initial"
    snapshot_progress="$snapshot.in_progress"
    mkdir -p $REPO_PUBDIR/$snapshot_progress
    initial_options="-i"
  fi

  /usr/bin/cvmfs_pull -d $REPO_PUBDIR \
    -u $REPO_URL \
    -t $REPO_TIMEOUT -r $REPO_RETRY -n $REPO_PARALLEL  \
    -k $REPO_KEY -m $REPO_NAME \
    -s $snapshot_progress -e $initial_options $ADDITIONAL_OPTIONS 2>&1 | tee -a $CVMFS_REPLICA_LOG
      
  if [ $PIPESTATUS -eq 0 ]; then
    mv $REPO_PUBDIR/$snapshot_progress $REPO_PUBDIR/$snapshot
    touch $REPO_PUBDIR/$snapshot/.cvmfs_master_replica
    ln -fTs $snapshot $REPO_PUBDIR/catalogs 2>&1 | tee -a $CVMFS_REPLICA_LOG
    # Retention
    for old_snapshot in `ls -t "$REPO_PUBDIR" | grep snapshot- | grep -v '\.' | tail -n +$CVMFS_SNAPSHOT_RETENTION`
    do
      remove="${REPO_PUBDIR}/${old_snapshot}"
      if [ -f "${remove}/.cvmfs_master_replica" ]; then
        rm -rf "$remove"
      fi  
    done
  else
    snapshot_failed="$snapshot.failed"
    rm -rf $REPO_PUBDIR/$snapshot_failed
    mv $REPO_PUBDIR/$snapshot_progress \
       $REPO_PUBDIR/$snapshot_failed
  fi
  
  /bin/date | tee -a $CVMFS_REPLICA_LOG
  echo "---" >> $CVMFS_REPLICA_LOG
done

rm -f "$LOCK_FILE"
